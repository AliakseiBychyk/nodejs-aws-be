service: product-service

app: aleks-rs-app-app
org: aleksbyczyk

frameworkVersion: '2'

provider: 
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  region: eu-west-1
  profile: private
  stage: dev
  httpApi:
    cors: true
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    PG_HOST: ${ssm:/db_host}
    PG_DATABASE: ${ssm:/db_database}
    PG_USERNAME: ${ssm:/db_username}
    PG_PASSWORD: ${ssm:/db_password}
    EMAIL_ADDRESS: ${ssm:/email~true}
    SQS_URL: !Ref ProductsSqsQueue
    SNS_TOPIC_ARN: !Ref ProductsSnsTopic
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - sns:*
          Resource: 
            - !Ref ProductsSnsTopic
        - Effect: Allow
          Action:
            - sqs:*
          Resource:
            - !GetAtt ProductsSqsQueue.Arn

plugins:
  - serverless-webpack

custom:
  sqsQueueName: aleksbyczyk-import-service-queue
  snsTopicName: aleksbyczyk-import-service-topic
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

functions:
  getProductsList:
    handler: handler.getProductsList
    events:
      - http:
          method: get
          path: /products
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !ImportValue CognitoAuthorizer

  getProductsById:
    handler: handler.getProductsById
    events:
      - http:
          method: get
          path: /products/{productId}
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !ImportValue CognitoAuthorizer
  
  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    description: Writes uploaded files into database table
    events:
      - sqs:
          batchSize: 5
          arn: !GetAtt ProductsSqsQueue.Arn

resources:
  Resources:
    ## SQS Queue
    ProductsSqsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.sqsQueueName}

    ## SNS Topic
    ProductsSnsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.snsTopicName}

    ## SNS Subscription
    ProductsSnsSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${self:provider.environment.EMAIL_ADDRESS}
        Protocol: email
        TopicArn: !Ref ProductsSnsTopic
  
  Outputs:
    ProductsSqsQueueOutput:
      Description: SQS queue for upload products
      Value: !Ref ProductsSqsQueue
      Export:
        Name: ProductsSqsQueue
        
    ProductsSqsQueueArnOutput:
      Description: SQS queue arn
      Value: !GetAtt ProductsSqsQueue.Arn
      Export:
        Name: ProductsSqsQueueArn
