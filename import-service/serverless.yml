service: import-service

app: aleks-rs-app-app
org: aleksbyczyk

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  region: eu-west-1
  profile: private
  stage: dev
  httpApi:
    cors: true
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    BUCKET_NAME: !Ref ProductsS3Bucket
    SQS_URL: !Ref ProductsSqsQueue
    # EMAIL_ADDRESS: ${ssm:/email~true}
  iam: 
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:ListBucket
          Resource: 
            - !GetAtt ProductsS3Bucket.Arn
        - Effect: Allow
          Action:
            - s3:*
          Resource: 
            - !Sub ${ProductsS3Bucket.Arn}/*
        - Effect: Allow
          Action:
            - sqs:*
          Resource:
            - !GetAtt ProductsSqsQueue.Arn
        # - Effect: Allow
        #   Action:
        #     - sns:*
        #   Resource: 
        #     - !Ref ProductsSnsTopic

plugins:
  - serverless-webpack
  
custom:
  s3BucketName: aleksbyczyk-import-service-bucket
  sqsQueueName: aleksbyczyk-import-service-queue
  # snsTopicName: aleksbyczyk-import-service-topic
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  
functions:
  importProductFile: 
    handler: handler.importProductsFile
    description: Provides signed url for upload a .csv file
    events:
      - http:
          method: GET
          path: /import
          cors: true

  importFileParser:
    handler: handler.importFileParser
    description: Parses .csv file and move processed .csv into /parsed folder
    events:
      - s3:
          bucket: !Ref ProductsS3Bucket
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
            - suffix: .csv
          existing: true

  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    description: Writes uploaded files into database table
    events:
      - sqs:
          batchSize: 5
          arn: !GetAtt ProductsSqsQueue.Arn

resources:
  Resources:
    ## S3 Bucket
    ProductsS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3BucketName}
        AccessControl: PublicRead
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
              AllowedOrigins:
                - '*'
    
    ## S3 Bucket Policy  
    ProductsS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ProductsS3Bucket
        PolicyDocument:
          Statement:
            - Sid: AllowPublicRead
              Effect: Allow
              Action: s3:GetObject
              Resource: !Sub ${ProductsS3Bucket.Arn}/*
              Principal:
                AWS: '*'

    ## SQS Queue
    ProductsSqsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.sqsQueueName}
    
    # ## SNS Topic
    # ProductsSnsTopic:
    #   Type: AWS::SNS::Topic
    #   Properties:
    #     DisplayName: ${self:custom.snsTopicName}
    #     TopicName: ${self:custom.snsTopicName}

    # ## SNS Subscription
    # ProductsSnsSubscription:
    #   Type: AWS::SNS::Subscription
    #   Properties:
    #     Endpoint: ${self:provider.environment.EMAIL_ADDRESS}
    #     Protocol: email
    #     TopicArn: !Ref ProductsSnsTopic

  Outputs:
    ProductsS3BucketOutput:
      Description: S3 bucket for products
      Value: !Ref ProductsS3Bucket     
