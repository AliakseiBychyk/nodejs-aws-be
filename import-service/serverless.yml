service: import-service

app: aleks-rs-app-app
org: aleksbyczyk

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  region: eu-west-1
  profile: private
  stage: dev
  httpApi:
    cors: true
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    BUCKET_NAME: aleksbyczyk-import-service-bucket

  iamRoleStatements:
    - Effect: Allow
      Action: s3:ListBucket
      Resource:
        - arn:aws:s3:::${self:provider.environment.BUCKET_NAME}
    - Effect: Allow
      Action:
        - s3:*
      Resource:
        - arn:aws:s3:::${self:provider.environment.BUCKET_NAME}/*

plugins:
  - serverless-webpack
  
custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  
functions:
  importProductFile: 
    handler: handler.importProductsFile
    events:
      - http:
          method: GET
          path: /import
          cors: true
  # importFileParser:
  #   handler: handler.importFileParser
  #   events:
  #     - s3:
  #       bucket: ${self:provider.environment.BUCKET_NAME}
  #       event: s3:ObjectCreated:*
  #       rules:
  #         - prefix: images/
  #       existing: true ## only when bucket exists but not created with cloudformation

resources:
  Resources:
    ## S3 Bucket
    ProductsS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.BUCKET_NAME}
        AccessControl: PublicRead
    
    ## S3 Bucket Policy  
    ProductsS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref ProductsS3Bucket
        PolicyDocument:
          Statement:
            - Sid: AllowPublicRead
              Effect: Allow
              Action: s3:GetObject
              Resource: !Sub ${ProductsS3Bucket.Arn}/*
              Principal:
                AWS: '*'
  Outputs:
    ProductsS3BucketOutput:
      Description: S3 bucket for products
      Value: !Ref ProductsS3Bucket     
